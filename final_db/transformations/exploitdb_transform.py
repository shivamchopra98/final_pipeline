

"""
Metasploit transformation (strict schema with CVE inclusion)
"""

import logging
from typing import Dict, Any, Optional
from utils.time_utils import iso_now

log = logging.getLogger(__name__)

EXPLOIT_FINAL_COLUMNS = [
    "cve_id",
    "exploit_id",
    "exploit_description",
    "exploit_file",
    "exploit_author",
    "exploit_type",
    "exploit_codes",
    "exploit_platform",
    "exploit_tags",
    "exploit_aliases",
    "screenshot_url",
    "application_url",
    "source_url",
    "uploaded_date",
]


def _get_field(record: Dict[str, Any], names) -> Optional[Any]:
    for n in names:
        if n in record:
            return record[n]
    return None


def clean_and_rename(record: Dict[str, Any]) -> Dict[str, Any]:
    out: Dict[str, Any] = {}

    # Include CVE
    cve = _get_field(record, ["CVE_id", "cve_id", "cveID"])
    out["cve_id"] = cve

    mapping = {
        "id": "exploit_id",
        "description": "exploit_description",
        "file": "exploit_file",
        "author": "exploit_author",
        "type": "exploit_type",
        "codes": "exploit_codes",
        "platform": "exploit_platform",
        "tags": "exploit_tags",
        "aliases": "exploit_aliases",
        "screenshot_url": "screenshot_url",
        "application_url": "application_url",
        "source_url": "source_url",

    }

    for old, new in mapping.items():
        val = _get_field(record, [old])
        if val is not None:
            out[new] = val

    out["uploaded_date"] = iso_now()

    for col in EXPLOIT_FINAL_COLUMNS:
        out.setdefault(col, None)

    return out
