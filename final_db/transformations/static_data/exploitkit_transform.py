"""
ExploitKit transformation (static dataset — uses NULL for missing fields)
All mapped fields are prefixed with `exploitkit_` to avoid collisions in the final table.
"""

import logging
from typing import Dict, Any
from utils.cve_utils import normalize_cve  # ✅ ensures consistent CVE formatting like CVE-2020-1234

log = logging.getLogger(__name__)

# Final schema columns for ExploitKit dataset
EXPLOITKIT_FINAL_COLUMNS = [
    "cve_id",
    "exploitkit_description",
    "exploitkit_kits",
    "exploitkit_last_seen",
    "exploitkit_sources",
    "exploitkit_source",  # provenance marker (always set to "exploitkit")
]


def _get_field(record: Dict[str, Any], names):
    """Return the first matching field value (case-insensitive, safe lookup)."""
    for n in names:
        if n in record:
            return record[n]
    return None


def clean_and_rename(record: Dict[str, Any]) -> Dict[str, Any]:
    """
    Clean and rename ExploitKit dataset records.
    - Always normalizes CVE.
    - Fills missing values with None (→ DynamoDB NULL).
    - Used only for left joins (does not overwrite non-matching CVEs).
    """
    out: Dict[str, Any] = {}

    # Normalize CVE
    cve = _get_field(record, ["cve", "CVE", "cve_id"])
    out["cve_id"] = normalize_cve(cve) if cve else None

    # Rename fields → prefixed schema
    rename_map = {
        "description": "exploitkit_description",
        "exploit-kits": "exploitkit_kits",
        "last-seen": "exploitkit_last_seen",
        "sources": "exploitkit_sources",
    }

    for old, new in rename_map.items():
        val = _get_field(record, [old])
        if val is not None:
            out[new] = val

    # Add provenance marker
    out["exploitkit_source"] = "exploitkit"

    # Fill missing fields with None (DynamoDB → NULL)
    for col in EXPLOITKIT_FINAL_COLUMNS:
        out.setdefault(col, None)

    return out
