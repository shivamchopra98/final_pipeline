# exploit_main.py
import os
import boto3
from dotenv import load_dotenv

load_dotenv()

from extract import download_raw_csv
from transform import transform_csv as transform_json
from load import sync_today_with_dynamodb

# Replace with the real feed URL
RAW_JSON_URL = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"

S3_BUCKET = os.getenv("S3_BUCKET")
S3_PREFIX = os.getenv("S3_PREFIX")

CISA_CONFIG = {
    "TABLE_NAME": "exploitdb_data",     # your existing local DynamoDB table name
    "DDB_ENDPOINT": os.getenv("DDB_ENDPOINT", "http://localhost:8000"),
    "AWS_REGION": os.getenv("AWS_REGION", "us-east-1"),
    "BASELINE_FILENAME": "exploitdb_extract.json",
    "BATCH_PROGRESS_SIZE": 25
}

def upload_to_s3(local_path):
    s3 = boto3.client(
        "s3",
        aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        region_name=os.getenv("AWS_REGION", "us-east-1")
    )
    key = os.path.join(S3_PREFIX, os.path.basename(local_path)).replace("\\", "/")
    print(f"⬆️ Uploading to s3://{S3_BUCKET}/{key}")
    s3.upload_file(local_path, S3_BUCKET, key)
    print(f"✅ Upload complete")
    return f"s3://{S3_BUCKET}/{key}"

def main():
    daily_dir = "./daily_extract"
    os.makedirs(daily_dir, exist_ok=True)

    # 1) Extract → save locally
    try:
        local_path = download_raw_csv(RAW_JSON_URL, daily_dir)
        print(f"✅ File stored locally at: {local_path}")
    except Exception as e:
        print(f"❌ Download failed: {e}")
        return

    # 2) Transform (local) — call transform_json
    try:
        transformed_path = transform_json(local_path)
    except Exception as e:
        print(f"❌ Transformation failed: {e}")
        return

    # 3) Upload transformed JSON to S3
    try:
        s3_uri = upload_to_s3(transformed_path)
        print(f"✅ File uploaded to S3: {s3_uri}")
    except Exception as e:
        print(f"❌ S3 upload failed: {e}")
        return

    # 4) Load / Sync to DynamoDB
    try:
        res = sync_today_with_dynamodb(transformed_path, CISA_CONFIG)
        print("✅ Sync result:", res)
    except Exception as e:
        print(f"❌ Load/sync failed: {e}")
        return

if __name__ == "__main__":
    main()
