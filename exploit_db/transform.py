# transform_exploitdb.py
import csv
import io
import json
import re
from datetime import datetime
from typing import List, Dict, Tuple, Any

CVE_RE = re.compile(r"(CVE-\d{4}-\d{4,7})", re.IGNORECASE)

def _extract_first_cve(codes_field: Any) -> str | None:
    if codes_field is None:
        return None
    if isinstance(codes_field, (list, tuple)):
        s = ";".join(map(str, codes_field))
    else:
        s = str(codes_field)
    m = CVE_RE.search(s)
    return m.group(1).upper() if m else None


def transform_csv_text_to_records_and_json_bytes(csv_text: str) -> Tuple[List[Dict[str, Any]], bytes]:
    f = io.StringIO(csv_text)
    sample = f.read(8192)
    f.seek(0)
    try:
        dialect = csv.Sniffer().sniff(sample)
        f.seek(0)
    except Exception:
        dialect = csv.excel
        f.seek(0)

    reader = csv.DictReader(f, dialect=dialect)
    records: List[Dict[str, Any]] = []
    today = datetime.now().strftime("%Y-%m-%d")

    for row in reader:
        normalized = { (k.strip() if k else k): (v if v is not None else None) for k,v in row.items() }
        _id = normalized.get("id") or normalized.get("ID") or normalized.get("Id")
        if not _id or str(_id).strip() == "":
            continue
        codes_field = None
        for candidate in ("codes", "codes ", "CVE_id", "CVE id", "cves", "codes_cve"):
            if candidate in normalized and normalized[candidate]:
                codes_field = normalized[candidate]
                break
        cve = _extract_first_cve(codes_field)
        normalized["id"] = str(_id).strip()
        normalized["CVE_id"] = cve
        normalized["uploaded_date"] = today
        for k, v in list(normalized.items()):
            if isinstance(v, str):
                normalized[k] = v.strip()
        records.append(normalized)

    json_bytes = json.dumps(records, ensure_ascii=False, indent=2).encode("utf-8")
    print(f"ðŸ”„ Transformed CSV -> records: {len(records)} rows, json bytes {len(json_bytes)}")
    return records, json_bytes
