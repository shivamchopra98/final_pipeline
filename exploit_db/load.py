# load_exploitdb.py
import json
import math
from decimal import Decimal
import time
from typing import List, Dict, Any, Optional
import boto3
from botocore.exceptions import ClientError

DEFAULT_CONFIG = {
    "TABLE_NAME": "infoservices-cybersecurity-vuln-exploit-data",
    "AWS_REGION": "us-east-1",
    "S3_BUCKET": None,
    "S3_PREFIX": "vuln-raw-source/exploitdb/",
    "BASELINE_FILENAME": "exploit_baseline.json",
    "BATCH_PROGRESS_INTERVAL": 500,
    "AWS_ACCESS_KEY_ID": None,
    "AWS_SECRET_ACCESS_KEY": None,
}

def _resolve_cfg(user_cfg: Optional[Dict[str, Any]]):
    cfg = DEFAULT_CONFIG.copy()
    if user_cfg:
        cfg.update(user_cfg)
    if cfg["S3_PREFIX"] and not cfg["S3_PREFIX"].endswith("/"):
        cfg["S3_PREFIX"] += "/"
    return cfg


def _s3_get_text_if_exists(s3_client, bucket: str, key: str) -> Optional[str]:
    try:
        resp = s3_client.get_object(Bucket=bucket, Key=key)
        return resp["Body"].read().decode("utf-8")
    except ClientError as e:
        code = e.response.get("Error", {}).get("Code", "")
        if code in ("NoSuchKey", "404", "NoSuchBucket", "NoSuchKey"):
            return None
        raise


def _s3_put_bytes(s3_client, bucket: str, key: str, bts: bytes):
    s3_client.put_object(Bucket=bucket, Key=key, Body=bts)


def _to_ddb_safe(v):
    if v is None:
        return None
    if isinstance(v, float):
        if math.isnan(v) or math.isinf(v):
            return None
        return Decimal(str(v))
    if isinstance(v, (int, Decimal)):
        return v
    if isinstance(v, (list, dict)):
        try:
            return json.dumps(v, sort_keys=True, ensure_ascii=False)
        except Exception:
            return str(v)
    s = str(v).strip()
    if s == "" or s.lower() in {"nan", "none"}:
        return None
    return s


def sync_exploit_records_to_dynamodb_and_s3(records: List[Dict[str, Any]], json_bytes: bytes, user_cfg: Dict[str, Any]) -> Dict[str, Any]:
    cfg = _resolve_cfg(user_cfg)
    s3_bucket = cfg["S3_BUCKET"]
    s3_prefix = cfg["S3_PREFIX"]
    baseline_key = f"{s3_prefix}{cfg['BASELINE_FILENAME']}"

    if not s3_bucket:
        raise RuntimeError("S3_BUCKET must be set in config")

    s3 = boto3.client(
        "s3",
        aws_access_key_id=cfg.get("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=cfg.get("AWS_SECRET_ACCESS_KEY"),
        region_name=cfg.get("AWS_REGION")
    )
    ddb = boto3.resource(
        "dynamodb",
        aws_access_key_id=cfg.get("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=cfg.get("AWS_SECRET_ACCESS_KEY"),
        region_name=cfg.get("AWS_REGION"),
        endpoint_url=cfg.get("DDB_ENDPOINT")
    )

    table_name = cfg["TABLE_NAME"]
    existing_tables = ddb.meta.client.list_tables().get("TableNames", [])
    if table_name not in existing_tables:
        print(f"‚ö° Creating DynamoDB table '{table_name}'...")
        t = ddb.create_table(
            TableName=table_name,
            KeySchema=[{"AttributeName": "id", "KeyType": "HASH"}],
            AttributeDefinitions=[{"AttributeName": "id", "AttributeType": "S"}],
            ProvisionedThroughput={"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}
        )
        t.meta.client.get_waiter("table_exists").wait(TableName=table_name)
        print("‚úÖ Table created.")
    table = ddb.Table(table_name)

    print(f"üîÅ Fetching baseline from s3://{s3_bucket}/{baseline_key}")
    baseline_text = _s3_get_text_if_exists(s3, s3_bucket, baseline_key)
    baseline_map = {}
    if baseline_text:
        try:
            baseline_list = json.loads(baseline_text)
            baseline_map = {str(i.get("id")): i for i in baseline_list if i.get("id")}
            print(f"‚ÑπÔ∏è Baseline loaded with {len(baseline_map)} items")
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to parse baseline: {e}")
    else:
        print("‚ÑπÔ∏è No baseline found (first run)")

    current_map = {str(r.get("id")): r for r in records if r.get("id")}
    to_write = []
    for iid, rec in current_map.items():
        base = baseline_map.get(iid)
        if base != rec:
            to_write.append(rec)

    print(f"‚ÑπÔ∏è New/changed records to write: {len(to_write)}")

    if to_write:
        print(f"‚¨ÜÔ∏è Writing {len(to_write)} items to DynamoDB...")
        with table.batch_writer() as batch:
            for i, rec in enumerate(to_write, start=1):
                safe = {k: _to_ddb_safe(v) for k, v in rec.items()}
                safe["id"] = str(safe.get("id"))
                batch.put_item(Item=safe)
                if i % cfg.get("BATCH_PROGRESS_INTERVAL", 500) == 0 or i == len(to_write):
                    print(f"‚¨ÜÔ∏è Batch wrote {i}/{len(to_write)}")
        print("‚úÖ DynamoDB writes complete")
    else:
        print("‚ÑπÔ∏è Nothing to write to DynamoDB.")

    merged = {**baseline_map, **current_map}
    baseline_bytes = json.dumps(list(merged.values()), ensure_ascii=False, indent=2).encode("utf-8")
    print(f"‚¨ÜÔ∏è Uploading baseline JSON to s3://{s3_bucket}/{baseline_key}")
    _s3_put_bytes(s3, s3_bucket, baseline_key, baseline_bytes)
    print("‚úÖ Baseline uploaded")

    summary = {
        "total_records": len(current_map),
        "new_or_updated": len(to_write),
        "s3_baseline": f"s3://{s3_bucket}/{baseline_key}"
    }
    print("‚ÑπÔ∏è Sync summary:", summary)
    return summary
